import streamlit as st
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.sequence import pad_sequences
import pickle
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go

# Charger le mod√®le et le tokenizer
try:
    model = load_model('best_model.keras') 
    with open('tokenizer.pkl', 'rb') as f:
        tokenizer = pickle.load(f)
except Exception as e:
    st.error(f"Erreur lors du chargement du mod√®le ou du tokenizer : {e}")

# D√©finir une fonction pour pr√©dire la cat√©gorie
def predict_category(text):
    max_length = 300  # Longueur maximale des s√©quences
    sequence = tokenizer.texts_to_sequences([text])
    padded = pad_sequences(sequence, maxlen=max_length, padding='post')
    prediction = model.predict(padded)
    categories = ['business', 'politics', 'sport', 'tech']
    probabilities = {categories[i]: float(prediction[0][i]) for i in range(len(categories))}
    category = categories[np.argmax(prediction)]
    confidence = np.max(prediction)
    return category, confidence,probabilities

# Personnaliser le style de la page
st.set_page_config(
    page_title="Document Classifier",
    page_icon="üì∞",
    layout="centered"
)

# En-t√™te de l'application
st.title("üì∞ Classification de Documents")
st.markdown("""
    Bienvenue dans l'application de classification de documents en Anglais. 
    Entrez un texte ci-dessous pour d√©couvrir sa cat√©gorie probable parmi :
    - **Tech**
    - **Business**
    - **Sport**
    - **Politics**
""")

# Ajouter une section pour l'entr√©e utilisateur
st.write("---")
st.subheader("üí° Entrez votre texte ci-dessous :")

# Champ de texte pour l'entr√©e utilisateur
user_input = st.text_area(
    "Votre texte :",
    placeholder="Tapez ou collez un texte ici, par exemple : The stock market saw a big rise today...",
    height=200
)

# Bouton de pr√©diction
if st.button("Pr√©dire la cat√©gorie"):
    if user_input.strip():
        if len(user_input.split()) > 300:
            st.error("‚ö†Ô∏è Votre texte est trop long. Veuillez saisir un texte de moins de 300 mots.")
        else:
            try:
                category, confidence,probabilities = predict_category(user_input)
                
                # Afficher les r√©sultats
                st.write("### üìã R√©sultat de la Classification")
                st.success(f"**Cat√©gorie pr√©dite : {category}**")
                st.write(f"üîç **Confiance : {confidence * 100:.2f}%**")
                
                # Convertir `confidence` en float Python avant de l'utiliser dans st.progress
                st.progress(float(confidence))  # Conversion pour √©viter l'erreur
                # Afficher un graphique interactif des probabilit√©s
                fig = px.bar(
                    x=list(probabilities.keys()),
                    y=list(probabilities.values()),
                    labels={'x': 'Cat√©gories', 'y': 'Probabilit√©'},
                    title="Distribution des Probabilit√©s par Cat√©gorie",
                    text_auto='.2s'
                )
                fig.update_traces(marker_color=['#4CAF50', '#FFC107', '#2196F3', '#FF5722'], textfont_size=12)
                st.plotly_chart(fig, use_container_width=True)

            except Exception as e:
                st.error(f"Erreur lors de la pr√©diction : {e}")
    else:
        st.error("‚ö†Ô∏è Veuillez entrer un texte valide.")

# Ajouter un pied de page
st.write("---")
st.markdown("""
    **D√©velopp√© par :** YNAA  
    üåü Projet NLP - M2 HPC  
    üõ†Ô∏è **Technologies utilis√©es :** TensorFlow, Streamlit
""")
